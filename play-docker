#!/bin/sh
# shellcheck disable=SC2039

# BEGIN VARIABLES
SHELLBIN=${SHELLBIN:-/bin/sh}
INTERACTIVE=false
VERBOSE=0
DRYRUN=false
CONTAINERNAME=
ARGFILE=
ENVFILE=

# Name of the file to search for by default.
ARGFILENAME="PLAYDOCKER"

# Pretty Formatting Codes.
ERRORFMT="\e[1m\e[31m"
WARNFMT="\e[1m\e[33m"
INFOFMT="\e[1m\e[97m"
RESETFMT="\e[0m"
# END VARIABLES

usage() {
  echo "Usage:  docker-play [OPTIONS]"
  echo
  echo "Run a standard set of options for starting a docker container."
  if [ $# -gt 0 ]; then
    echo
    echo "E.g."
    echo "\$ ls test-proxy"
    echo "test-proxy/README.md test-proxy/$ARGFILENAME test-proxy/config.toml"
    echo "\$ cd test"
    echo "\$ docker-play"
    echo
    echo "test/$ARGFILENAME:"
    echo "\`\`\`"
    echo "--volume /var/run/docker.sock:/var/run/docker.sock"
    echo "--volume ./config.toml:/etc/traefik/traefik.toml"
    echo "--publish 8080:8080  # 8080 is the admin port."
    echo "--publish 80:80      # Open the HTTP port."
    echo "traefik              # The container to run."
    echo "\`\`\`"
    echo
    echo "A container called 'test-proxy' will be created with the above "
    echo "arguments passed to docker run."
  fi
  echo
  echo "Options:"
  echo "      --dry-run          Print out the resulting command."
  echo "  -e                     Load environment variables from provided .env file."
  echo "  -E                     Load environment variables from '.envrc'."
  echo "  -f, --file             Path to an $ARGFILENAME."
  echo "  -h, --help             Print usage"
  echo "  -i, --interactive      Run a basic shell in the docker container."
  echo "  -n, --name             The name of the container to be run."
  echo "                         Defaults to the working directory name."
  echo "  -v, --verbose          Raise the verbosity for each flag present."
  exit 1
}

err() {
  printf "%b%s%b" "${ERRORFMT}" "${1}" "${RESETFMT}\n" 1>&2
}

warn() {
  if [ $VERBOSE -gt 0 ]; then
    printf "%b%s%b" "${WARNFMT}" "${1}" "${RESETFMT}\n" 1>&2
  fi
}

info() {
  if [ $VERBOSE -gt 1 ]; then
    printf "%b%s%b" "${INFOFMT}" "${1}" "${RESETFMT}\n" 1>&2
  fi
}

error_option() {
  err "$1: -$OPTARG"
  echo
  usage
}

missing_argument() {
  err "Missing Required Argument: $1"
  echo
  usage
}

parse_option() {
  case "$1" in
    dry-run) DRYRUN=true; VERBOSE=2 ;;
    e) ENVFILE="${OPTARG}" ;;
    E) ENVFILE=".envrc" ;;
    f|file) ARGFILE="${OPTARG}" ;;
    h|help) usage "verbose" ;;
    i|interactive) INTERACTIVE=true ;;
    n|name) CONTAINERNAME="${OPTARG}" ;;
    v|verbose) VERBOSE=$((VERBOSE + 1)) ;;
    \?) error_option "Invalid Option" ;;
    :) error_option "Missing Option" ;;
  esac
}

while getopts ":e:Ef:hin:v-:" opt; do
  # Normalize the long options.
  case "${opt}" in
    -)
      opt="${OPTARG}"
      OPTARG="$(eval echo "\$${OPTIND}")"
      ;;
  esac
  parse_option "${opt}"
done

shift $((OPTIND - 1))

# BEGIN IMPLICIT ARGUMENT PARSING
# Get the Container Name.
if [ -z "$CONTAINERNAME" ]; then
  # Use the current working directory name.
  CONTAINERNAME="$(basename "$(pwd)")"
fi

# Get the Argfile.
if [ -z "$ARGFILE" ]; then
  # Search for an Argfile in the current directory.
  if [ -f "$ARGFILENAME" ]; then
    ARGFILE="./$ARGFILENAME"
  else
    err "No $ARGFILENAME in current working directory."
    missing_argument "ARGFILE"
  fi
fi

if [ ! $# -eq 0 ]; then
  warn "Truncating Extra Arguments: '$*'"
fi
# END IMPLICIT ARGUMENT PARSING

# BEGIN PREPARATION
RUNARGS="--name $CONTAINERNAME "

if [ -f "${ENVFILE}" ]; then
  while read -r line; do
    # Ignore empty lines and lines that begin with a hash.
    case "$line" in
      ""|\#*) continue ;;
    esac
    # Format to ignore a leading `export `.
    line="$(echo "${line}" | sed -E 's|^export\s+||')"
    # Check to see that the line is vaguely in the shape of `KEY=VALUE`.
    if echo "${line}" | grep -q -E '^[^=]+=.*$'; then
      RUNARGS="${RUNARGS}-e ${line} "
    fi
  done < "$ENVFILE"
fi

while read -r line; do
  # Ignore empty lines and lines that begin with a hash.
  case "$line" in
    ""|\#*) continue ;;
  esac
  # Evaluate each part of the line to account for subshells and variables.
  for part in ${line}; do
    case "$part" in
      ""|\#*) break ;;
    esac

    parteval="$(eval "printf '%s' $part" 2>/dev/null)"
    # shellcheck disable=SC2181
    if [ $? -eq 0 ]; then
      part="${parteval}"
    fi
    RUNARGS="${RUNARGS}$part "
  done
done < "$ARGFILE"

if [ $INTERACTIVE = true ]; then
  RUNARGS="--rm -it --volume $(pwd):/mnt --entrypoint=$SHELLBIN ${RUNARGS}-i"
else
  RUNARGS="--detach --restart=always ${RUNARGS}"
fi
# END PREPARATION

# BEGIN EXECUTION
info "Stopping Container:"
if [ $DRYRUN = true ]; then
  warn "docker stop $CONTAINERNAME"
else
  warn "$(docker stop "$CONTAINERNAME" 2>&1)"
fi
info "Deleting Container:"
if [ $DRYRUN = true ]; then
  warn "docker rm $CONTAINERNAME"
else
  warn "$(docker rm "$CONTAINERNAME" 2>&1)"
fi

info "Running Container:"
if [ $DRYRUN = true ]; then
  warn "docker run $RUNARGS"
else
  # Need eval since posix sh does not support enhanced arrays.
  # shellcheck disable=SC2086
  eval docker run $RUNARGS
fi
# END EXECUTION
